---
name: Uffizzi Cluster

on:  
  # REUSABLE WORKFLOW with INPUTS
  # to keep this workflow simple, assumptions are made:
    # - Checks out a repo with a kustomization.yaml file
    # - Changes a image tag in the kustomization.yaml file
    # - Deploys to a Uffizzi Cluster
    # - Optionally notifies a Slack channel

  workflow_call:
    # allow reuse of this workflow in other repos
    inputs:
      repo:
        description: Kustomize repo to checkout
        required: true
        type: string
        # default: org/repo
      image:
        description: Image name to update in Kustomize
        required: true
        type: string
        # default: ghcr.io/org/repo
      tag:
        description: New tag to use for the image
        required: true
        type: string
      environments-root-dir:
        description: Root directory where all environment directories are located
        required: false
        type: string
        default: environments
      environment-dir:
        description: Path to the kustomization.yaml file
        required: true
        type: string
        # default: staging01
      slack-channel-id:
        description: Slack channel ID to post to
        required: false
        type: string
        # default: C0123456789
      pr-number:
        description: Pull Request Number (or other unique ID)
        required: true
        type: string
      operation:
        description: 'Specification for the operation on the cluster. Whether it needs to be created, deleted or updated.'
        default: 'create'
        required: true

    secrets:
      slack-token:
        description: Docker Hub username
        required: false
      github-token:
        description: Docker Hub token with write access to the repo and PRs
        required: true
      uffizzi-password:
        description: Uffizzi account password
        required: true

#    outputs:
#      pr-url:
#        description: "The newly created GitHub Pull Request URL"
#        value: ${{ jobs.gitops-pr.outputs.pr-url }}

# permissions: GITHUB_TOKEN are better set by the **calling** workflow
# but we'll set defaults here for reference
# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idpermissions
# Need `id-token: write` for OIDC: https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/about-security-hardening-with-openid-connect#adding-permissions-settings
permissions:
  id-token: write

jobs:
  uffizzi:
    name: Uffizzi
    runs-on: ubuntu-latest

#    outputs:
#      pr-url: ${{ steps.cpr.outputs.pull-request-url }}

    steps:
      - name: Checkout ${{ inputs.repo }}
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.repo }}
          token: ${{ secrets.github-token }}
          ref: uffizzi

      # - name: Change image tag in kustomization.yaml
      #   run: |
      #     cd ${{ inputs.environments-root-dir }}/${{ inputs.environment-dir }}
      #     kustomize edit set image "$(echo '${{ inputs.image }}' | tr '[:upper:]' '[:lower:]'):${{ inputs.tag }}"
      #     cat kustomization.yaml

      - name: Create Uffizzi Cluster
        env:
          UFFIZZI_SERVER: https://pr-1100-deployment-29999-uffizzi-platform.app.uffizzi.com/
          UFFIZZI_USER: admin@uffizzi.com
          UFFIZZI_PASSWORD: ${{ secrets.uffizzi-password }}
          UFFIZZI_PROJECT: default
          UFFIZZI_IMAGE: uffizzi/cli:pr-239
          UFFIZZI_CLUSTER: pr-${{ inputs.pr-number }}
          UFFIZZI_OP: ${{inputs.operation}}
        run: |
          #!/bin/bash
          # Checking if the script received any argument
          if [ $# -eq 0 ]; then
              echo "No arguments provided"
              echo "[create|delete]"
              exit 1
          fi

          # Retrieve the operation from the script argument
          operation=$1

          # Handling the operation
          if [ "$operation" = "create" ]; then
              echo "Checking if uffizzi cluster ${UFFIZZI_CLUSTER} already exists"    
              if docker run --rm \
                  --env UFFIZZI_SERVER \
                  --env REQUEST_TOKEN=${ACTIONS_ID_TOKEN_REQUEST_TOKEN} \
                  --env REQUEST_TOKEN_URL=${ACTIONS_ID_TOKEN_REQUEST_URL} \
                  ${UFFIZZI_IMAGE} cluster list | grep --quiet ${UFFIZZI_CLUSTER}
              # If it already exists, fetch the `kubeconfig` to connect to it.
              then
                  echo "Cluster already existsUpdating kubeconfig to point to ${UFFIZZI_CLUSTER}"
                  docker run --rm --env UFFIZZI_SERVER \
                      --env REQUEST_TOKEN=${ACTIONS_ID_TOKEN_REQUEST_TOKEN} \
                      --env REQUEST_TOKEN_URL=${ACTIONS_ID_TOKEN_REQUEST_URL} \
                      --mount type=bind,source="$(pwd)",target=/home \
                  ${UFFIZZI_IMAGE} cluster update-kubeconfig \
                      --name=${UFFIZZI_CLUSTER} --kubeconfig="/home/kubeconfig"
              else 
                  echo "Creating ..."
                  docker run --rm --env UFFIZZI_SERVER \
                      --env REQUEST_TOKEN=${ACTIONS_ID_TOKEN_REQUEST_TOKEN} \
                      --env REQUEST_TOKEN_URL=${ACTIONS_ID_TOKEN_REQUEST_URL} \
                      --mount type=bind,source="$(pwd)",target=/home \
                  ${UFFIZZI_IMAGE} cluster create \
                      --name=${UFFIZZI_CLUSTER} --kubeconfig="/home/kubeconfig"
              fi
          elif [ "$operation" = "delete" ]; then
              # Insert delete logic here
              echo "Deleting..."
          else
              # Default case if none of the above cases match
              echo "Invalid operation. Please provide either 'create' or 'delete'"
              exit 1
          fi

          exit 0

      # - name: Post to a Slack channel
      #   id: slack
      #   if: ${{ inputs.slack-channel-id }}
      #   uses: slackapi/slack-github-action@v1
      #   with:
      #     channel-id: ${{ inputs.slack-channel-id }}
      #     slack-message: "PR deployed `pr-${{ inputs.pr-number }}`"
      #   env:
      #     SLACK_BOT_TOKEN: ${{ secrets.slack-token }}